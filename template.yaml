AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Cocktail Database Infrastructure (Supports Dev/Prod Environments)

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
    Description: The deployment environment (dev or prod).
  DatabaseName:
    Type: String
    Default: "cocktaildb-dev"
  CognitoAdvancedSecurity:
    Type: String
    Default: "OFF" # Consider making this conditional: "ENFORCED" for prod, "OFF" for dev
  UserPoolName:
    Type: String
    Default: "CocktailDB-UserPool-dev"
  DomainName:
    Type: String
    Default: mixology.tools
    Description: Custom domain name for production (e.g., mixology.tools). Not used for dev.
  HostedZoneId:
    Type: String
    Description: ID of the existing Route 53 hosted zone for your production domain (without /hostedzone/ prefix). Required if Environment is prod.

Globals:
  Function:
    Runtime: python3.12
    Timeout: 60
    MemorySize: 1536

Conditions:
  IsProdEnvironment: !Equals [!Ref Environment, "prod"]

Resources:
  # VPC and Network Configuration
  CocktailVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-vpc

  # Private subnet in AZ-0 for Lambda functions and EFS mount target
  # This ensures AZ-affinity: Lambda functions and EFS mount target are in the same AZ
  # preventing cross-AZ latency and potential ENOENT errors
  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref CocktailVPC
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      CidrBlock: 10.0.1.0/24
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-private-subnet-1

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref CocktailVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-private-route-table

  # --- Add S3 Gateway VPC Endpoint ---
  S3VPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref CocktailVPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3 # S3 service endpoint
      RouteTableIds:
        - !Ref PrivateRouteTable
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: "*"
            Action:
              - "s3:GetObject"
              - "s3:PutObject"
              - "s3:ListBucket"
              - "s3:DeleteObject"
            Resource:
              - !Sub "arn:aws:s3:::cocktailwebsite-${AWS::AccountId}-${Environment}"
              - !Sub "arn:aws:s3:::cocktailwebsite-${AWS::AccountId}-${Environment}/*"
              - !If 
                - IsProdEnvironment
                - !Sub "arn:aws:s3:::cocktaildbbackups-${AWS::AccountId}-${Environment}"
                - !Ref "AWS::NoValue"
              - !If 
                - IsProdEnvironment
                - !Sub "arn:aws:s3:::cocktaildbbackups-${AWS::AccountId}-${Environment}/*"
                - !Ref "AWS::NoValue"
  # ------------------------------------

  # EFS VPC Endpoint for Lambda-to-EFS API communication
  EFSVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref CocktailVPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.elasticfilesystem
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnet
      SecurityGroupIds:
        - !Ref EFSVPCEndpointSecurityGroup
      PrivateDnsEnabled: true
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: "*"
            Action:
              - "elasticfilesystem:ClientMount"
              - "elasticfilesystem:ClientWrite"
              - "elasticfilesystem:ClientRootAccess"
              - "elasticfilesystem:DescribeMountTargets"
            Resource: "*"

  # Security Group for EFS VPC Endpoint
  EFSVPCEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for EFS VPC Endpoint
      VpcId: !Ref CocktailVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref LambdaSecurityGroup

  # EFS File System
  CocktailEFS:
    Type: AWS::EFS::FileSystem
    Properties:
      PerformanceMode: generalPurpose
      Encrypted: true # Consider making this conditional if dev doesn't need encryption
      LifecyclePolicies:
        - TransitionToIA: AFTER_7_DAYS
      FileSystemTags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-efs

  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable



  # Security Groups for Lambda and EFS
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Lambda functions
      VpcId: !Ref CocktailVPC
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          DestinationSecurityGroupId: !Ref EFSSecurityGroup
        - IpProtocol: udp
          FromPort: 53
          ToPort: 53
          CidrIp: 10.0.0.2/32
        - IpProtocol: tcp
          FromPort: 53
          ToPort: 53
          CidrIp: 10.0.0.2/32

  EFSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for EFS
      VpcId: !Ref CocktailVPC

  # Security Group Rules (separated to avoid circular dependencies)
  LambdaIngressHTTPS:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref LambdaSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: !GetAtt CocktailVPC.CidrBlock

  EFSIngressFromLambda:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EFSSecurityGroup
      IpProtocol: tcp
      FromPort: 2049
      ToPort: 2049
      SourceSecurityGroupId: !Ref LambdaSecurityGroup

  # EFS Mount Target in private subnet for security and AZ-affinity
  # Single mount target ensures Lambda functions access EFS from the same AZ
  # avoiding cross-AZ latency and potential ENOENT errors
  MountTarget:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref CocktailEFS
      SubnetId: !Ref PrivateSubnet
      SecurityGroups:
        - !Ref EFSSecurityGroup

  # EFS Access Point
  EFSAccessPoint:
    Type: AWS::EFS::AccessPoint
    Properties:
      FileSystemId: !Ref CocktailEFS
      PosixUser:
        Uid: "1000"
        Gid: "1000"
      RootDirectory:
        Path: "/lambda"
        CreationInfo:
          OwnerUid: "1000"
          OwnerGid: "1000"
          Permissions: "0755"

  # S3 bucket for database backups (prod only)
  BackupBucket:
    Type: AWS::S3::Bucket
    Condition: IsProdEnvironment
    Properties:
      BucketName: !Sub "cocktaildbbackups-${AWS::AccountId}-${Environment}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
      LifecycleConfiguration: 
        Rules:
          - Id: ExpireOldBackups
            Status: Enabled
            ExpirationInDays: 30

  # S3 bucket for website hosting
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "cocktailwebsite-${AWS::AccountId}-${Environment}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD
            AllowedOrigins:
              - '*'
            MaxAge: 3600

  # SSL Certificate for CloudFront
  CloudFrontCertificate:
    Type: AWS::CertificateManager::Certificate
    Condition: IsProdEnvironment
    Properties:
      DomainName: !Ref DomainName
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Ref DomainName
          HostedZoneId: !Ref HostedZoneId
      # Certificate must be in us-east-1 for CloudFront

  # Route 53 Record Set for CloudFront
  DomainRecordSet:
    Type: AWS::Route53::RecordSet
    Condition: IsProdEnvironment
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref DomainName
      Type: A
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2 # CloudFront hosted zone ID (static value)
        EvaluateTargetHealth: false

  # CloudFront Origin Access Control
  CloudFrontOAC:
    Type: AWS::CloudFront::OriginAccessControl
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      OriginAccessControlConfig:
        Name: !Sub ${AWS::StackName}-oac-${AWS::Region}
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  # CloudFront Distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: index.html
        Aliases: !If [IsProdEnvironment, [!Ref DomainName], !Ref "AWS::NoValue"]
        ViewerCertificate: !If
          - IsProdEnvironment
          - AcmCertificateArn: !Ref CloudFrontCertificate
            SslSupportMethod: sni-only
            MinimumProtocolVersion: TLSv1.2_2021
          - CloudFrontDefaultCertificate: true # Use default CF cert for dev
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt WebsiteBucket.RegionalDomainName
            OriginAccessControlId: !GetAtt CloudFrontOAC.Id
            S3OriginConfig: {}
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # Managed-CachingOptimized
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # Managed-CORS-S3Origin
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 404
            ResponsePagePath: /error.html
          - ErrorCode: 404
            ResponseCode: 404
            ResponsePagePath: /error.html

  # Bucket policy to allow CloudFront access using custom resource to avoid circular dependency
  WebsiteBucketPolicyFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.11
      Handler: index.handler
      InlineCode: |
        import boto3
        import cfnresponse
        import json

        def handler(event, context):
            try:
                if event['RequestType'] in ['Create', 'Update']:
                    bucket_name = event['ResourceProperties']['BucketName']
                    distribution_id = event['ResourceProperties']['DistributionId']
                    account_id = event['ResourceProperties']['AccountId']

                    policy = {
                        'Version': '2012-10-17',
                        'Statement': [{
                            'Effect': 'Allow',
                            'Principal': {'Service': 'cloudfront.amazonaws.com'},
                            'Action': 's3:GetObject',
                            'Resource': f'arn:aws:s3:::{bucket_name}/*',
                            'Condition': {
                                'StringEquals': {
                                    'AWS:SourceArn': f'arn:aws:cloudfront::{account_id}:distribution/{distribution_id}'
                                }
                            }
                        }]
                    }

                    s3 = boto3.client('s3')
                    s3.put_bucket_policy(
                        Bucket=bucket_name,
                        Policy=json.dumps(policy)
                    )

                cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
            except Exception as e:
                print(f"Error: {str(e)}")
                cfnresponse.send(event, context, cfnresponse.FAILED, {})
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - s3:PutBucketPolicy
              Resource: !Sub arn:aws:s3:::${WebsiteBucket}

  # Bucket policy custom resource
  BucketPolicyResource:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt WebsiteBucketPolicyFunction.Arn
      BucketName: !Ref WebsiteBucket
      DistributionId: !Ref CloudFrontDistribution
      AccountId: !Ref AWS::AccountId

  # Lambda for API Backend
  CocktailLambda:
    Type: AWS::Serverless::Function
    DependsOn: 
      - MountTarget
    Properties:
      FunctionName: !Sub ${AWS::StackName}-api-handler
      CodeUri: api/
      Handler: main.handler  
      Timeout: 60
      Environment:
        Variables:
          DB_NAME: !Ref DatabaseName
          USER_POOL_ID: !Ref CognitoUserPool
          APP_CLIENT_ID: !Ref CognitoUserPoolClient
          ENVIRONMENT: !Ref Environment
          DB_PATH: !Sub /mnt/efs/${DatabaseName}.db
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet
      FileSystemConfigs:
        - Arn: !GetAtt EFSAccessPoint.Arn
          LocalMountPath: /mnt/efs
      Policies:
        - VPCAccessPolicy: {}
        - Statement:
            - Sid: AWSLambdaVPCAccessExecutionRole
              Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                - ec2:CreateNetworkInterface
                - ec2:DescribeNetworkInterfaces
                - ec2:DeleteNetworkInterface
                - ec2:DescribeVpcEndpoints
                - ec2:DescribeSecurityGroups
                - ec2:DescribeSubnets
              Resource: "*"
            - Sid: AmazonElasticFileSystemClientFullAccess
              Effect: Allow
              Action:
                - elasticfilesystem:ClientMount
                - elasticfilesystem:ClientWrite
                - elasticfilesystem:ClientRootAccess
                - elasticfilesystem:DescribeMountTargets
              Resource: "*"
      Events:
        GetIngredients:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /ingredients
            Method: get
        PostIngredient:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /ingredients
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer
        PutIngredient:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /ingredients/{ingredientId}
            Method: put
            Auth:
              Authorizer: CognitoAuthorizer
        DeleteIngredient:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /ingredients/{ingredientId}
            Method: delete
            Auth:
              Authorizer: CognitoAuthorizer
        GetIngredientItem:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /ingredients/{ingredientId}
            Method: get
        SearchIngredients:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /ingredients/search
            Method: get
        BulkUploadIngredients:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /ingredients/bulk
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer
        GetRecipes:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /recipes
            Method: get
        SearchRecipes:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /recipes/search
            Method: get
        SearchRecipesWithInventory:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /recipes/search/inventory
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer
        PostRecipe:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /recipes
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer
        BulkUploadRecipes:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /recipes/bulk
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer
        PutRecipe:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /recipes/{recipeId}
            Method: put
            Auth:
              Authorizer: CognitoAuthorizer
        DeleteRecipe:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /recipes/{recipeId}
            Method: delete
            Auth:
              Authorizer: CognitoAuthorizer
        GetUnits:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /units
            Method: get
        PostUnit:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /units
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer
        PutUnit:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /units/{unitId}
            Method: put
            Auth:
              Authorizer: CognitoAuthorizer
        DeleteUnit:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /units/{unitId}
            Method: delete
            Auth:
              Authorizer: CognitoAuthorizer
        # Auth test endpoint
        GetAuth:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /auth
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer
        GetRecipeItem:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /recipes/{recipeId}
            Method: get
        # Rating endpoints
        GetRatings:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /ratings/{recipeId}
            Method: get
        PostRating:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /ratings/{recipeId}
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer
        PutRating:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /ratings/{recipeId}
            Method: put
            Auth:
              Authorizer: CognitoAuthorizer
        DeleteRating:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /ratings/{recipeId}
            Method: delete
            Auth:
              Authorizer: CognitoAuthorizer

        # --- START Tag Endpoints ---
        GetPublicTags:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /tags/public
            Method: get
        PostPublicTag:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /tags/public
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer

        GetPrivateTags:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /tags/private
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer
        PostPrivateTag:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /tags/private
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer

        PostRecipePublicTag:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /recipes/{recipeId}/public_tags
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer
        DeleteRecipePublicTag:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /recipes/{recipeId}/public_tags/{tagId}
            Method: delete
            Auth:
              Authorizer: CognitoAuthorizer
            
        PostRecipePrivateTag:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /recipes/{recipeId}/private_tags
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer
        DeleteRecipePrivateTag:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /recipes/{recipeId}/private_tags/{tagId}
            Method: delete
            Auth:
              Authorizer: CognitoAuthorizer
        # --- END Tag Endpoints ---
        
        # --- User Ingredients Endpoints ---
        GetUserIngredients:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /user-ingredients
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer
        PostUserIngredient:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /user-ingredients
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer
        DeleteUserIngredient:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /user-ingredients/{ingredientId}
            Method: delete
            Auth:
              Authorizer: CognitoAuthorizer
        BulkAddUserIngredients:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /user-ingredients/bulk
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer
        BulkDeleteUserIngredients:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /user-ingredients/bulk
            Method: delete
            Auth:
              Authorizer: CognitoAuthorizer
        # --- END User Ingredients Endpoints ---
        
        # --- Admin Endpoints ---
        GetAdminDatabaseDownload:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /admin/database/download
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer
        # FastAPI Built-in Endpoints
        GetOpenApiJson:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /openapi.json
            Method: get

  # Custom resource to create sqlite db on EFS
  SchemaDeployFunction:
    Type: AWS::Serverless::Function
    DependsOn: 
      - MountTarget
    Properties:
      FunctionName: !Sub ${AWS::StackName}-schema-deploy
      CodeUri: schema-deploy/
      Handler: deploy.lambda_handler
      Timeout: 60
      Environment:
        Variables:
          DB_NAME: !Ref DatabaseName
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet
      FileSystemConfigs:
        - Arn: !GetAtt EFSAccessPoint.Arn
          LocalMountPath: /mnt/efs
      Policies:
        - VPCAccessPolicy: {}
        - Statement:
            - Effect: Allow
              Action:
                - elasticfilesystem:ClientMount
                - elasticfilesystem:ClientWrite
                - elasticfilesystem:ClientRootAccess
              Resource: !GetAtt CocktailEFS.Arn


  # Cognito User Pool for Authentication
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Ref UserPoolName # This now uses the environment-specific default
      AliasAttributes:
        - email
        - preferred_username
      AutoVerifiedAttributes: []
      MfaConfiguration: "OFF"
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
      Policies:
        PasswordPolicy:
          MinimumLength: 6
          RequireLowercase: false
          RequireNumbers: false
          RequireSymbols: false
          RequireUppercase: false
      UserPoolAddOns:
        AdvancedSecurityMode: !Ref CognitoAdvancedSecurity # Use parameter
      Schema:
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true

  # Cognito User Pool Client
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: !Sub cocktaildb-client-${Environment}
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_PASSWORD_AUTH
      PreventUserExistenceErrors: ENABLED
      SupportedIdentityProviders:
        - COGNITO
      CallbackURLs: !If
        - IsProdEnvironment
        - - !Sub "https://${DomainName}/callback.html"
          - !Sub "https://${DomainName}/login.html" # Assuming a login redirect page
        - - !Sub "https://${CloudFrontDistribution.DomainName}/callback.html"
          - !Sub "https://${CloudFrontDistribution.DomainName}/login.html"
      LogoutURLs: !If
        - IsProdEnvironment
        - - !Sub "https://${DomainName}/logout.html"
        - - !Sub "https://${CloudFrontDistribution.DomainName}/logout.html"
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - phone
        - email
        - openid
        - profile
      AllowedOAuthFlowsUserPoolClient: true

  # Cognito Domain for Hosted UI
  CognitoDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub "cocktaildbauth-${Environment}-${AWS::AccountId}" # Globally unique domain
      UserPoolId: !Ref CognitoUserPool

  # IAM Role for API Gateway CloudWatch Logging
  ApiGatewayCloudWatchRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

  # Configure API Gateway Account to use the logging role
  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt ApiGatewayCloudWatchRole.Arn

  # API Gateway for backend endpoints - Create API after Lambda functions
  CocktailAPI:
    Type: AWS::Serverless::Api
    DependsOn: # Ensure the account role is configured before the API/Stage is created
      - ApiGatewayAccount
    Properties:
      Name: !Sub ${AWS::StackName}-api
      StageName: api
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,Accept,Access-Control-Allow-Headers,Access-Control-Allow-Origin,Access-Control-Allow-Methods'"
        AllowOrigin: "'*'" # Allow all origins
      Auth:
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt CognitoUserPool.Arn
        AddDefaultAuthorizerToCorsPreflight: false
      # --- Add MethodSettings for Stage Logging ---
      MethodSettings:
        - ResourcePath: '/*' # Apply to all paths
          HttpMethod: '*'    # Apply to all methods
          LoggingLevel: INFO # Options: OFF, ERROR, INFO
          DataTraceEnabled: true # Log full request/response data
          MetricsEnabled: true # Enable CloudWatch Metrics
      # ------------------------------------------

  # Lambda Function for Nightly DB Backup (prod only)
  BackupLambda:
    Type: AWS::Serverless::Function
    Condition: IsProdEnvironment
    DependsOn:
      - MountTarget
    Properties:
      FunctionName: !Sub ${AWS::StackName}-db-backup-handler
      CodeUri: backup-lambda/
      Handler: backup.lambda_handler
      Timeout: 300 # 5 minutes, adjust if needed for large DBs
      Environment:
        Variables:
          DB_PATH: !Sub /mnt/efs/${DatabaseName}.db
          BACKUP_BUCKET: !Ref BackupBucket
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet
      FileSystemConfigs:
        - Arn: !GetAtt EFSAccessPoint.Arn
          LocalMountPath: /mnt/efs
      Policies:
        - VPCAccessPolicy: {}
        - Statement:
            - Sid: AWSLambdaVPCAccessExecutionRole
              Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                - ec2:CreateNetworkInterface
                - ec2:DescribeNetworkInterfaces
                - ec2:DeleteNetworkInterface
              Resource: "*"
            - Sid: AmazonElasticFileSystemClientAccess
              Effect: Allow
              Action:
                - elasticfilesystem:ClientMount
                - elasticfilesystem:ClientRead
                - elasticfilesystem:DescribeMountTargets
              Resource: "*"
            - Effect: Allow
              Action:
                - s3:PutObject
                - s3:ListBucket
                - s3:DeleteObject
              Resource:
                - !Sub arn:aws:s3:::${BackupBucket}
                - !Sub arn:aws:s3:::${BackupBucket}/*

  # EventBridge Rule to trigger backup nightly (prod only)
  BackupSchedule:
    Type: AWS::Events::Rule
    Condition: IsProdEnvironment
    Properties:
      Name: !Sub ${AWS::StackName}-DailyDbBackupRule
      Description: Trigger nightly database backup
      ScheduleExpression: "cron(0 8 * * ? *)" # Every day at 8:00 AM UTC = midnight pacific
      State: ENABLED
      Targets:
        - Arn: !GetAtt BackupLambda.Arn
          Id: "BackupLambdaTarget"

  # Permission for EventBridge to invoke the Backup Lambda (prod only)
  BackupLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Condition: IsProdEnvironment
    Properties:
      FunctionName: !GetAtt BackupLambda.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt BackupSchedule.Arn

  VpcFlowLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/vpc/flowlogs/${AWS::StackName}"
      RetentionInDays: 7         # keep 7 days; adjust as needed

  VpcFlowLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: vpc-flow-logs.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AllowCWLogs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !GetAtt VpcFlowLogGroup.Arn

  CocktailVpcFlowLogs:
    Type: AWS::EC2::FlowLog
    Properties:
      ResourceType: VPC
      ResourceId:  !Ref CocktailVPC       # the VPC in your template
      TrafficType: ALL                    # ACCEPT | REJECT | ALL
      LogDestinationType: cloud-watch-logs
      LogGroupName:  !Ref VpcFlowLogGroup
      DeliverLogsPermissionArn: !GetAtt VpcFlowLogsRole.Arn
      MaxAggregationInterval: 60          # 1 min granularity

Outputs:
  VpcId:
    Description: ID of the VPC
    Value: !Ref CocktailVPC

  PrivateSubnetId:
    Description: ID of Private Subnet
    Value: !Ref PrivateSubnet

  EFSFileSystemId:
    Description: ID of the EFS file system
    Value: !Ref CocktailEFS

  EFSMountPath:
    Description: Mount path for EFS in Lambda
    Value: /mnt/efs

  WebsiteURL:
    Description: S3 Website URL (direct, for reference)
    Value: !Sub "https://${WebsiteBucket.DomainName}" # This gives the S3 regional domain, not the CF one

  WebsiteBucketName:
    Description: Name of the S3 bucket used for website hosting
    Value: !Ref WebsiteBucket

  CloudFrontURL:
    Description: CloudFront Distribution URL (use this for dev, or as base for prod CNAME)
    Value: !Sub https://${CloudFrontDistribution.DomainName}

  CloudFrontDistribution:
    Description: CloudFront Distribution ID
    Value: !Ref CloudFrontDistribution

  ApiEndpoint:
    Description: API Gateway Endpoint URL
    Value: !Sub https://${CocktailAPI}.execute-api.${AWS::Region}.amazonaws.com/api

  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref CognitoUserPool
    
  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref CognitoUserPoolClient
    
  CognitoDomainURL:
    Description: Cognito Domain URL for hosted UI
    Value: !Sub "https://${CognitoDomain}.auth.${AWS::Region}.amazoncognito.com"

  CustomDomainURL:
    Description: Website URL with custom domain (production only)
    Value: !If [IsProdEnvironment, !Sub "https://${DomainName}", "N/A (dev environment)"]

  CertificateARN:
    Description: ACM Certificate ARN (production only)
    Value: !If [IsProdEnvironment, !Ref CloudFrontCertificate, "N/A (dev environment)"]

  BackupBucketName:
    Description: S3 bucket for database backups (prod only)
    Value: !If [IsProdEnvironment, !Ref BackupBucket, "N/A (dev environment)"]

