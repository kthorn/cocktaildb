AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Cocktail Database Infrastructure

Parameters:
  DatabaseName:
    Type: String
    Default: cocktaildb

Globals:
  Function:
    Runtime: python3.12
    Timeout: 60
    MemorySize: 256
  
  Api:
    Cors:
      AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      AllowOrigin: "'*'"

Resources:
  # VPC and Network Configuration
  CocktailVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-vpc

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref CocktailVPC
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-public-subnet-1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref CocktailVPC
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-public-subnet-2

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-igw

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref CocktailVPC
      InternetGatewayId: !Ref InternetGateway

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref CocktailVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-route-table

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  Subnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref RouteTable

  Subnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref RouteTable

  # VPC Endpoint for Secrets Manager
  SecretsManagerVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref CocktailVPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.secretsmanager
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroupIds:
        - !Ref LambdaSecurityGroup
      PrivateDnsEnabled: true

  # VPC Endpoint for RDS
  RDSVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref CocktailVPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.rds
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroupIds:
        - !Ref LambdaSecurityGroup
      PrivateDnsEnabled: true

  # Database credentials in Secrets Manager
  DBCredentialsSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${AWS::StackName}-db-creds
      Description: !Sub Credentials for ${DatabaseName} database
      GenerateSecretString:
        SecretStringTemplate: '{"username": "postgres"}'
        GenerateStringKey: password
        PasswordLength: 16
        ExcludeCharacters: '"@/\'

  # Database Resources
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for Cocktail Database
      SubnetIds:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Cocktail Database
      VpcId: !Ref CocktailVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref LambdaSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Lambda functions
      VpcId: !Ref CocktailVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !GetAtt CocktailVPC.CidrBlock
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0  # Allow HTTPS outbound for AWS services
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: !GetAtt CocktailVPC.CidrBlock # Allow PostgreSQL outbound within VPC
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !GetAtt CocktailVPC.CidrBlock # Allow HTTPS outbound within VPC

  DatabaseSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref DatabaseSecurityGroup
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      SourceSecurityGroupId: !Ref LambdaSecurityGroup
    DependsOn:
      - DatabaseSecurityGroup
      - LambdaSecurityGroup

  LambdaSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref LambdaSecurityGroup
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      DestinationSecurityGroupId: !Ref DatabaseSecurityGroup
    DependsOn:
      - DatabaseSecurityGroup
      - LambdaSecurityGroup

  # Aurora Serverless v2 cluster
  CocktailDatabase:
    Type: AWS::RDS::DBCluster
    Properties:
      Engine: aurora-postgresql
      EngineVersion: 16.3 
      EngineMode: provisioned
      Port: 5432
      ServerlessV2ScalingConfiguration:
        MinCapacity: 0
        MaxCapacity: 1
      DatabaseName: !Ref DatabaseName
      MasterUsername: !Sub '{{resolve:secretsmanager:${AWS::StackName}-db-creds:SecretString:username}}'
      MasterUserPassword: !Sub '{{resolve:secretsmanager:${AWS::StackName}-db-creds:SecretString:password}}'
      VpcSecurityGroupIds:
        - !Ref DatabaseSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup

  # Aurora Serverless v2 instance
  CocktailDatabaseInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: aurora-postgresql
      DBClusterIdentifier: !Ref CocktailDatabase
      DBInstanceClass: db.serverless
      PubliclyAccessible: false
      MultiAZ: false
      AvailabilityZone: !Select [0, !GetAZs '']

  # S3 bucket for cocktail images
  CocktailBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-cocktail-images
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # S3 bucket for website hosting
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-website
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD
            AllowedOrigins:
              - '*'
            MaxAge: 3600

  # Bucket policy to allow CloudFront access using custom resource to avoid circular dependency
  WebsiteBucketPolicyFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      InlineCode: |
        import boto3
        import cfnresponse
        import json

        def handler(event, context):
            try:
                if event['RequestType'] in ['Create', 'Update']:
                    bucket_name = event['ResourceProperties']['BucketName']
                    distribution_id = event['ResourceProperties']['DistributionId']
                    account_id = event['ResourceProperties']['AccountId']

                    policy = {
                        'Version': '2012-10-17',
                        'Statement': [{
                            'Effect': 'Allow',
                            'Principal': {'Service': 'cloudfront.amazonaws.com'},
                            'Action': 's3:GetObject',
                            'Resource': f'arn:aws:s3:::{bucket_name}/*',
                            'Condition': {
                                'StringEquals': {
                                    'AWS:SourceArn': f'arn:aws:cloudfront::{account_id}:distribution/{distribution_id}'
                                }
                            }
                        }]
                    }

                    s3 = boto3.client('s3')
                    s3.put_bucket_policy(
                        Bucket=bucket_name,
                        Policy=json.dumps(policy)
                    )

                cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
            except Exception as e:
                print(f"Error: {str(e)}")
                cfnresponse.send(event, context, cfnresponse.FAILED, {})
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - s3:PutBucketPolicy
              Resource: !Sub arn:aws:s3:::${WebsiteBucket}

  # Bucket policy custom resource
  BucketPolicyResource:
    Type: AWS::CloudFormation::CustomResource
    DependsOn:
      - WebsiteBucket
      - CloudFrontDistribution
    Properties:
      ServiceToken: !GetAtt WebsiteBucketPolicyFunction.Arn
      BucketName: !Ref WebsiteBucket
      DistributionId: !Ref CloudFrontDistribution
      AccountId: !Ref AWS::AccountId

  # CloudFront Origin Access Control
  CloudFrontOAC:
    Type: AWS::CloudFront::OriginAccessControl
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      OriginAccessControlConfig:
        Name: !Sub ${AWS::StackName}-oac-${AWS::Region}
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  # CloudFront Distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: index.html
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt WebsiteBucket.RegionalDomainName
            OriginAccessControlId: !GetAtt CloudFrontOAC.Id
            S3OriginConfig: {}
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # Managed-CachingOptimized
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # Managed-CORS-S3Origin
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 404
            ResponsePagePath: /error.html
          - ErrorCode: 404
            ResponseCode: 404
            ResponsePagePath: /error.html

  # Lambda for API Backend - Create Lambda functions first
  CocktailLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-api-handler
      CodeUri: cocktaildb/
      Handler: handler.lambda_handler
      Timeout: 30
      Environment:
        Variables:
          DB_SECRET_ARN: !Ref DBCredentialsSecret
          DB_NAME: !Ref DatabaseName
          DB_CLUSTER_ARN: !GetAtt CocktailDatabase.DBClusterArn
          S3_BUCKET: !Ref CocktailBucket
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2
      Policies:
        - VPCAccessPolicy: {}
        - Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
                - secretsmanager:DescribeSecret
              Resource: !Ref DBCredentialsSecret
            - Effect: Allow
              Action:
                - ec2:DescribeVpcEndpoints
                - ec2:DescribeSecurityGroups
                - ec2:DescribeSubnets
              Resource: "*"
            - Effect: Allow
              Action:
                - rds:DescribeDBClusters
                - rds:DescribeDBInstances
                - rds:DescribeDBClusterEndpoints
                - rds-data:ExecuteStatement
                - rds-data:BatchExecuteStatement
              Resource: !GetAtt CocktailDatabase.DBClusterArn
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
                - s3:DeleteObject
                - s3:ListBucket
              Resource:
                - !Sub arn:aws:s3:::${CocktailBucket}
                - !Sub arn:aws:s3:::${CocktailBucket}/*
      Events:
        GetIngredients:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /ingredients
            Method: get
        PostIngredient:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /ingredients
            Method: post
        PutIngredient:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /ingredients
            Method: put
        DeleteIngredient:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /ingredients
            Method: delete
        OptionsIngredients:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /ingredients
            Method: options
        GetRecipes:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /recipes
            Method: get
        PostRecipe:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /recipes
            Method: post
        PutRecipe:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /recipes
            Method: put
        DeleteRecipe:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /recipes
            Method: delete
        OptionsRecipes:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /recipes
            Method: options
        GetUnits:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /units
            Method: get
        PostUnit:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /units
            Method: post
        PutUnit:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /units
            Method: put
        DeleteUnit:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /units
            Method: delete
        OptionsUnits:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /units
            Method: options

  # S3 bucket for deployment artifacts
  DeploymentBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-deployment
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # API Gateway for backend endpoints - Create API after Lambda functions
  CocktailAPI:
    Type: AWS::Serverless::Api
    DependsOn:
      - CocktailLambda
    Properties:
      Name: !Sub ${AWS::StackName}-api
      StageName: api
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
      Auth:
        DefaultAuthorizer: NONE

  # Add VPC Endpoint for RDS Data API
  RDSDataVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref CocktailVPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.rds-data
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroupIds:
        - !Ref LambdaSecurityGroup
      PrivateDnsEnabled: true

Outputs:
  VpcId:
    Description: ID of the VPC
    Value: !Ref CocktailVPC

  PublicSubnet1Id:
    Description: ID of Public Subnet 1
    Value: !Ref PublicSubnet1

  PublicSubnet2Id:
    Description: ID of Public Subnet 2
    Value: !Ref PublicSubnet2

  DatabaseEndpoint:
    Description: Database endpoint
    Value: !GetAtt CocktailDatabase.Endpoint.Address

  DatabasePort:
    Description: Database port
    Value: 5432

  CocktailBucketName:
    Description: S3 bucket for cocktail images
    Value: !Ref CocktailBucket

  WebsiteURL:
    Description: S3 Website URL (direct)
    Value: !Sub "https://${WebsiteBucket.DomainName}"

  WebsiteBucketName:
    Description: Name of the S3 bucket used for website hosting
    Value: !Ref WebsiteBucket

  CloudFrontURL:
    Description: CloudFront Distribution URL (use this for your website)
    Value: !Sub https://${CloudFrontDistribution.DomainName}

  CloudFrontDistribution:
    Description: CloudFront Distribution ID
    Value: !Ref CloudFrontDistribution

  ApiEndpoint:
    Description: API Gateway Endpoint URL
    Value: !Sub https://${CocktailAPI}.execute-api.${AWS::Region}.amazonaws.com/api