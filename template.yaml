AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Cocktail Database Infrastructure

Parameters:
  DatabaseName:
    Type: String
    Default: cocktaildb
  CognitoAdvancedSecurity:
    Type: String
    Default: "OFF"
  UserPoolName:
    Type: String
    Default: CocktailDB-UserPool

Globals:
  Function:
    Runtime: python3.12
    Timeout: 60
    MemorySize: 256
  
  Api:
    Cors:
      AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,Accept,Access-Control-Allow-Headers,Access-Control-Allow-Origin,Access-Control-Allow-Methods'"
      AllowOrigin: "'*'"

Resources:
  # VPC and Network Configuration
  CocktailVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-vpc

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref CocktailVPC
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-public-subnet-1

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-igw

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref CocktailVPC
      InternetGatewayId: !Ref InternetGateway

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref CocktailVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-route-table

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  Subnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref RouteTable

  # EFS File System
  CocktailEFS:
    Type: AWS::EFS::FileSystem
    Properties:
      PerformanceMode: generalPurpose
      Encrypted: true
      LifecyclePolicies:
        - TransitionToIA: AFTER_7_DAYS
      FileSystemTags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-efs

  # Security Groups for Lambda and EFS
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Lambda functions
      VpcId: !Ref CocktailVPC
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  EFSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for EFS
      VpcId: !Ref CocktailVPC

  # Security Group Rules (separated to avoid circular dependencies)
  LambdaIngressHTTPS:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref LambdaSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: !GetAtt CocktailVPC.CidrBlock

  LambdaEgressToEFS:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref LambdaSecurityGroup
      IpProtocol: tcp
      FromPort: 2049
      ToPort: 2049
      DestinationSecurityGroupId: !Ref EFSSecurityGroup

  EFSIngressFromLambda:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EFSSecurityGroup
      IpProtocol: tcp
      FromPort: 2049
      ToPort: 2049
      SourceSecurityGroupId: !Ref LambdaSecurityGroup

  EFSEgressHTTPS:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref EFSSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: !GetAtt CocktailVPC.CidrBlock

  # Update the MountTarget to use the new EFS security group
  MountTarget:
    Type: AWS::EFS::MountTarget
    DependsOn:
      - CocktailEFS
    Properties:
      FileSystemId: !Ref CocktailEFS
      SubnetId: !Ref PublicSubnet
      SecurityGroups:
        - !Ref EFSSecurityGroup

  # EFS Access Point
  EFSAccessPoint:
    Type: AWS::EFS::AccessPoint
    DependsOn:
      - CocktailEFS
    Properties:
      FileSystemId: !Ref CocktailEFS
      PosixUser:
        Uid: "1000"
        Gid: "1000"
      RootDirectory:
        Path: "/lambda"
        CreationInfo:
          OwnerUid: "1000"
          OwnerGid: "1000"
          Permissions: "0755"

  # S3 bucket for cocktail images
  CocktailBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-cocktail-images
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # S3 bucket for website hosting
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-website
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD
            AllowedOrigins:
              - '*'
            MaxAge: 3600

  # CloudFront Origin Access Control
  CloudFrontOAC:
    Type: AWS::CloudFront::OriginAccessControl
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      OriginAccessControlConfig:
        Name: !Sub ${AWS::StackName}-oac-${AWS::Region}
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  # CloudFront Distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: index.html
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt WebsiteBucket.RegionalDomainName
            OriginAccessControlId: !GetAtt CloudFrontOAC.Id
            S3OriginConfig: {}
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # Managed-CachingOptimized
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # Managed-CORS-S3Origin
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 404
            ResponsePagePath: /error.html
          - ErrorCode: 404
            ResponseCode: 404
            ResponsePagePath: /error.html

  # Bucket policy to allow CloudFront access using custom resource to avoid circular dependency
  WebsiteBucketPolicyFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      InlineCode: |
        import boto3
        import cfnresponse
        import json

        def handler(event, context):
            try:
                if event['RequestType'] in ['Create', 'Update']:
                    bucket_name = event['ResourceProperties']['BucketName']
                    distribution_id = event['ResourceProperties']['DistributionId']
                    account_id = event['ResourceProperties']['AccountId']

                    policy = {
                        'Version': '2012-10-17',
                        'Statement': [{
                            'Effect': 'Allow',
                            'Principal': {'Service': 'cloudfront.amazonaws.com'},
                            'Action': 's3:GetObject',
                            'Resource': f'arn:aws:s3:::{bucket_name}/*',
                            'Condition': {
                                'StringEquals': {
                                    'AWS:SourceArn': f'arn:aws:cloudfront::{account_id}:distribution/{distribution_id}'
                                }
                            }
                        }]
                    }

                    s3 = boto3.client('s3')
                    s3.put_bucket_policy(
                        Bucket=bucket_name,
                        Policy=json.dumps(policy)
                    )

                cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
            except Exception as e:
                print(f"Error: {str(e)}")
                cfnresponse.send(event, context, cfnresponse.FAILED, {})
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - s3:PutBucketPolicy
              Resource: !Sub arn:aws:s3:::${WebsiteBucket}

  # Bucket policy custom resource
  BucketPolicyResource:
    Type: AWS::CloudFormation::CustomResource
    DependsOn:
      - WebsiteBucket
      - CloudFrontDistribution
    Properties:
      ServiceToken: !GetAtt WebsiteBucketPolicyFunction.Arn
      BucketName: !Ref WebsiteBucket
      DistributionId: !Ref CloudFrontDistribution
      AccountId: !Ref AWS::AccountId

  # Lambda for API Backend
  CocktailLambda:
    Type: AWS::Serverless::Function
    DependsOn: 
      - MountTarget
      - EFSAccessPoint
      - CognitoUserPool
      - CognitoUserPoolClient
    Properties:
      FunctionName: !Sub ${AWS::StackName}-api-handler
      CodeUri: cocktaildb/
      Handler: handler.lambda_handler
      Timeout: 30
      Environment:
        Variables:
          DB_NAME: !Ref DatabaseName
          S3_BUCKET: !Ref CocktailBucket
          USER_POOL_ID: !Ref CognitoUserPool
          APP_CLIENT_ID: !Ref CognitoUserPoolClient
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PublicSubnet
      FileSystemConfigs:
        - Arn: !GetAtt EFSAccessPoint.Arn
          LocalMountPath: /mnt/efs
      Policies:
        - VPCAccessPolicy: {}
        - Statement:
            - Effect: Allow
              Action:
                - elasticfilesystem:ClientMount
                - elasticfilesystem:ClientWrite
                - elasticfilesystem:ClientRootAccess
              Resource: !GetAtt CocktailEFS.Arn
            - Effect: Allow
              Action:
                - ec2:DescribeVpcEndpoints
                - ec2:DescribeSecurityGroups
                - ec2:DescribeSubnets
              Resource: "*"
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
                - s3:DeleteObject
                - s3:ListBucket
              Resource:
                - !Sub arn:aws:s3:::${CocktailBucket}
                - !Sub arn:aws:s3:::${CocktailBucket}/*
      Events:
        GetIngredients:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /ingredients
            Method: get
        PostIngredient:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /ingredients
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer
        PutIngredient:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /ingredients
            Method: put
            Auth:
              Authorizer: CognitoAuthorizer
        DeleteIngredient:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /ingredients
            Method: delete
            Auth:
              Authorizer: CognitoAuthorizer
        OptionsIngredients:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /ingredients
            Method: options
        GetRecipes:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /recipes
            Method: get
        PostRecipe:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /recipes
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer
        PutRecipe:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /recipes/{recipeId}
            Method: put
            Auth:
              Authorizer: CognitoAuthorizer
        DeleteRecipe:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /recipes/{recipeId}
            Method: delete
            Auth:
              Authorizer: CognitoAuthorizer
        OptionsRecipes:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /recipes
            Method: options
        GetUnits:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /units
            Method: get
        PostUnit:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /units
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer
        PutUnit:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /units
            Method: put
            Auth:
              Authorizer: CognitoAuthorizer
        DeleteUnit:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /units
            Method: delete
            Auth:
              Authorizer: CognitoAuthorizer
        OptionsUnits:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /units
            Method: options
        # Auth test endpoint
        GetAuth:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /auth
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer
        OptionsAuth:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /auth
            Method: options
        GetRecipeItem:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /recipes/{recipeId}
            Method: get
        OptionsRecipeItem:
          Type: Api
          Properties:
            RestApiId: !Ref CocktailAPI
            Path: /recipes/{recipeId}
            Method: options


  # Custom resource to create sqlite db on EFS
  SchemaDeployFunction:
    Type: AWS::Serverless::Function
    DependsOn: 
      - MountTarget
      - EFSAccessPoint
    Properties:
      FunctionName: !Sub ${AWS::StackName}-schema-deploy
      CodeUri: schema-deploy/
      Handler: deploy.lambda_handler
      Timeout: 60
      Environment:
        Variables:
          DB_NAME: !Ref DatabaseName
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PublicSubnet
      FileSystemConfigs:
        - Arn: !GetAtt EFSAccessPoint.Arn
          LocalMountPath: /mnt/efs
      Policies:
        - VPCAccessPolicy: {}
        - Statement:
            - Effect: Allow
              Action:
                - elasticfilesystem:ClientMount
                - elasticfilesystem:ClientWrite
                - elasticfilesystem:ClientRootAccess
              Resource: !GetAtt CocktailEFS.Arn


  # S3 bucket for deployment artifacts
  DeploymentBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-deployment
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # Cognito User Pool for Authentication
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Ref UserPoolName
      AliasAttributes:
        - email
        - preferred_username
      AutoVerifiedAttributes: []
      MfaConfiguration: "OFF"
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
      Policies:
        PasswordPolicy:
          MinimumLength: 6
          RequireLowercase: false
          RequireNumbers: false
          RequireSymbols: false
          RequireUppercase: false
      UserPoolAddOns:
        AdvancedSecurityMode: "OFF"
      Schema:
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true

  # Cognito User Pool Client
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: cocktaildb-client
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_PASSWORD_AUTH
      PreventUserExistenceErrors: ENABLED
      SupportedIdentityProviders:
        - COGNITO
      CallbackURLs:
        - !Sub https://${CloudFrontDistribution.DomainName}/callback.html
      LogoutURLs:
        - !Sub https://${CloudFrontDistribution.DomainName}/logout.html
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - phone
        - email
        - openid
        - profile
      AllowedOAuthFlowsUserPoolClient: true

  # Cognito Domain for Hosted UI
  CognitoDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub ${AWS::StackName}-auth
      UserPoolId: !Ref CognitoUserPool

  # IAM Role for API Gateway CloudWatch Logging
  ApiGatewayCloudWatchRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

  # Configure API Gateway Account to use the logging role
  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt ApiGatewayCloudWatchRole.Arn

  # API Gateway for backend endpoints - Create API after Lambda functions
  CocktailAPI:
    Type: AWS::Serverless::Api
    DependsOn: # Ensure the account role is configured before the API/Stage is created
      - ApiGatewayAccount
    Properties:
      Name: !Sub ${AWS::StackName}-api
      StageName: api
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,Accept,Access-Control-Allow-Headers,Access-Control-Allow-Origin,Access-Control-Allow-Methods'"
        AllowOrigin: "'*'"
      Auth:
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt CognitoUserPool.Arn
        AddDefaultAuthorizerToCorsPreflight: false
      # --- Add MethodSettings for Stage Logging ---
      MethodSettings:
        - ResourcePath: '/*' # Apply to all paths
          HttpMethod: '*'    # Apply to all methods
          LoggingLevel: INFO # Options: OFF, ERROR, INFO
          DataTraceEnabled: true # Log full request/response data
          MetricsEnabled: true # Enable CloudWatch Metrics
      # ------------------------------------------
      GatewayResponses:
        DEFAULT_4XX:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"
              Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,Accept,Access-Control-Allow-Headers,Access-Control-Allow-Origin,Access-Control-Allow-Methods'"
              Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
        DEFAULT_5XX:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"
              Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,Accept,Access-Control-Allow-Headers,Access-Control-Allow-Origin,Access-Control-Allow-Methods'"
              Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"

Outputs:
  VpcId:
    Description: ID of the VPC
    Value: !Ref CocktailVPC

  PublicSubnetId:
    Description: ID of Public Subnet
    Value: !Ref PublicSubnet

  EFSFileSystemId:
    Description: ID of the EFS file system
    Value: !Ref CocktailEFS

  EFSMountPath:
    Description: Mount path for EFS in Lambda
    Value: /mnt/efs

  CocktailBucketName:
    Description: S3 bucket for cocktail images
    Value: !Ref CocktailBucket

  WebsiteURL:
    Description: S3 Website URL (direct)
    Value: !Sub "https://${WebsiteBucket.DomainName}"

  WebsiteBucketName:
    Description: Name of the S3 bucket used for website hosting
    Value: !Ref WebsiteBucket

  CloudFrontURL:
    Description: CloudFront Distribution URL (use this for your website)
    Value: !Sub https://${CloudFrontDistribution.DomainName}

  CloudFrontDistribution:
    Description: CloudFront Distribution ID
    Value: !Ref CloudFrontDistribution

  ApiEndpoint:
    Description: API Gateway Endpoint URL
    Value: !Sub https://${CocktailAPI}.execute-api.${AWS::Region}.amazonaws.com/api

  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref CognitoUserPool
    
  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref CognitoUserPoolClient
    
  CognitoDomainURL:
    Description: Cognito Domain URL for hosted UI
    Value: !Sub https://${AWS::StackName}-auth.auth.${AWS::Region}.amazoncognito.com

